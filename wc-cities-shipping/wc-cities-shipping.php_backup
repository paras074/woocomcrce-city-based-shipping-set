<?php
/**
 * Plugin Name: WC Cities Shipping
 * Plugin URI:  https://perfectwebservices.com/
 * Description: City based shipping for WooCommerce.
 * Version:     1.0.6
 * Author:      Perfect Web Services
 * WC tested up to:      5.5
 */

if ( ! defined( 'WPINC' ) ){
 die('security by preventing any direct access to your plugin file');
}


if (in_array('woocommerce/woocommerce.php', apply_filters('active_plugins', get_option('active_plugins')))) {
 function citieswise_shipping_method()
 {
 if (!class_exists('Citieswise_Shipping_Method')) {
 class Citieswise_Shipping_Method extends WC_Shipping_Method
 {
 public function __construct(  )
 {
	 $this->id = 'citieswise';
	 $this->method_title = __('Cities Shipping', 'citieswise');
	 $this->method_description = __('Custom Shipping Method for cities based', 'citieswise');
     $this->availability = 'including';
     $this->countries = array('CA' );
 	 $this->init();

			//$this->enabled              = $this->get_option( 'enabled' );
			//$this->title                = $this->get_option( 'title' );
	 $this->enabled = isset($this->settings['enabled']) ? $this->settings['enabled'] : 'yes';
	 $this->title = isset($this->settings['title']) ? $this->settings['title'] : __('Cities Shipping', 'citieswise');
 }
 /**
 Load the settings API
 */
 function init()
 { 
	 $this->init_form_fields();
	 $this->init_settings();
	 add_action('woocommerce_update_options_shipping_' . $this->id, array($this, 'process_admin_options'));
	/* echo "<pre>";
	 print_r($_POST);
	 echo "</pre>";  */
	 if(isset($_POST['city_rates']) && !empty($_POST['city_rates'])){
		 global $wpdb;
		 $delete = $wpdb->query("TRUNCATE TABLE `wpo7_cities_shipping_rules`");
		  $counts=count($_POST['city_rates']['shipping_state']);
		 for($i=1; $i<=$counts; $i++){
		 $wpdb->insert('wpo7_cities_shipping_rules', array(
		'shipping_state' => $_POST['city_rates']['shipping_state'][$i],
		'shipping_cities' => serialize($_POST['city_rates']['shipping_cities'][$i]),
		'shipping_cost_city' => $_POST['city_rates']['shipping_cost_city'][$i], // ... and so on
	)); 
		 }
		 //wp_redirect( admin_url( '/admin.php?page=wc-settings&tab=shipping&section=citieswise' ));
		  //  exit; 
	 }
 }
 function init_form_fields()
 {
	 $this->form_fields = array(
		 'enabled' => array(
		 'title' => __('Enable', 'citieswise'),
		 'type' => 'checkbox',
		 'default' => 'yes'
		 ),
		 'title' => array(
		 'title' => __('Title', 'citieswise'),
		 'type' => 'text',
		 'default' => __('Cities Shipping', 'citieswise')
		 ),
	 );
	 //require_once 'template/additional-charges-cities.php';
 }
 public function citieswise_shipping_calculation($package)
 {
 $weight = 0;
 $cost = 0;
 $country = $package["destination"]["country"];
 foreach ($package['contents'] as $item_id => $values) {
 $_product = $values['data'];
 $weight = $weight + $_product->get_weight() * $values['quantity'];
 }
 $weight = wc_get_weight($weight, 'kg');
 if ($weight <= 5) {
 $cost = 0;
 } elseif ($weight <= 25) {
 $cost = 5;
 } elseif ($weight <= 45) {
 $cost = 10;
 } else {
 $cost = 15;
 }
 $countryZones = array(
 'ES' => 2,
 'GB' => 2,
 'US' => 3
 );
 $zonePrices = array(
 2 => 50,
 3 => 70
 );
 $zoneFromCountry = $countryZones[$country];
 $priceFromZone = $zonePrices[$zoneFromCountry];
 $cost += $priceFromZone;
 $rate = array(
 'id' => $this->id,
 'label' => $this->title,
 'cost' => $cost
 );
 $this->add_rate($rate);
 }
 }
 }
 }
 add_action('woocommerce_shipping_init', 'citieswise_shipping_method');
 
 
 function add_citieswise_shipping_method($methods)
 {
 $methods[] = 'Citieswise_Shipping_Method';
 return $methods;
 }
 add_filter('woocommerce_shipping_methods', 'add_citieswise_shipping_method');
 function citieswise_validate_order($posted)
 {
 $packages = WC()->shipping->get_packages();
 $chosen_methods = WC()->session->get('chosen_shipping_methods');
 if (is_array($chosen_methods) && in_array('citieswise', $chosen_methods)) {
 foreach ($packages as $i => $package) {
 if ($chosen_methods[$i] != "citieswise") {
 continue;
 }
 $citieswise_Shipping_Method = new citieswise_Shipping_Method();
 $weightLimit = (int)$citieswise_Shipping_Method->settings['weight'];
 $weight = 0;
 foreach ($package['contents'] as $item_id => $values) {
 $_product = $values['data'];
 $weight = $weight + $_product->get_weight() * $values['quantity'];
 }
 $weight = wc_get_weight($weight, 'kg');
 if ($weight > $weightLimit) {
 $message = sprintf(__('OOPS, %d kg increase the maximum weight of %d kg for %s', 'citieswise'), $weight, $weightLimit, $citieswise_Shipping_Method->title);
 $messageType = "error";
 if (!wc_has_notice($message, $messageType)) {
 wc_add_notice($message, $messageType);
 }
 }
 }
 }
 }
 add_action('woocommerce_review_order_before_cart_contents', 'citieswise_validate_order', 10);
 add_action('woocommerce_after_checkout_validation', 'citieswise_validate_order', 10);
 
 /*--------get Cities data start-------------*/
add_action('wp_ajax_custom_shipping_get_cities','function_custom_shipping_get_cities');
add_action("wp_ajax_nopriv_custom_shipping_get_cities", "function_custom_shipping_get_cities");
function function_custom_shipping_get_cities() 
{

global $wpdb;
if(isset($_POST["sid"]))
{
	
$sid=sanitize_text_field($_POST["sid"]);
}
$cities = $wpdb->get_results( $wpdb->prepare( "SELECT * FROM ".$wpdb->base_prefix."city where state_id=%1s order by name asc", $sid));
echo json_encode($cities);
wp_die();
}
/*--------get Cities data end-------------*/

/*--------delete a rule function start-------------*/
add_action('wp_ajax_custom_shipping_rule_delete','function_custom_shipping_rule_delete');
add_action("wp_ajax_nopriv_custom_shipping_rule_delete", "function_custom_shipping_rule_delete");
function function_custom_shipping_rule_delete() 
{

global $wpdb;
if(isset($_POST["table_id"]))
{
	
$sid=sanitize_text_field($_POST["table_id"]);
}
$table = $wpdb->base_prefix.'cities_shipping_rules';
$res=$wpdb->delete( $table, array( 'id' => $sid ) );
echo json_encode($res);
wp_die();
}
/*--------delete a rule function  end-------------*/
}